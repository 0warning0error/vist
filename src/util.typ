#let kmp_search = (bigger, smaller) => {
  let build_prefix_table(pattern) = {
    let m = pattern.len();
    let prefix_table = (0,) * (m);
    let length = 0; 
    let i = 1;

    while i < m {
      if pattern.at(i) == pattern.at(length) {
        length = length + 1;
        prefix_table.at(i) = length;
        i = i + 1;
      } else {
        if length != 0 {
          length = prefix_table.at(length - 1);
        } else {
          prefix_table.at(i) = 0;
          i = i + 1;
        }
      }
    }
    prefix_table
  };

  let n = bigger.len();
  let m = smaller.len();

  if m == 0 {
    return 0;
  }

  let prefix_table = build_prefix_table(smaller);
  let i = 0;
  let j = 0;

  while i < n {
    if smaller.at(j) == bigger.at(i) {
      j = j + 1;
      i = i + 1;
    }

    if j == m {
      return i - j;
    } else if i < n and smaller.at(j) != bigger.at(i) {
      if j != 0 {
        j = prefix_table.at(j - 1);
      } else {
        i = i + 1;
      }
    }
  }

  -1
}


#let is_png = (data) => {
  return data.len() >= 8 and data.slice(0,8) == bytes((137, 80, 78, 71, 13, 10, 26, 10))
}

#let is_webp = (data) => {
  if data.len() < 12 {
    false
  } else {
    data.slice(0, 4) == bytes("RIFF") and data.slice(8, 12) == bytes("WEBP")
  }
}

#let is_jpeg(data) = {
  return data.len() >= 3 and data.slice(0,3) == bytes((255, 216, 255))
}

#let is_gif(data) = {
  return data.len() >= 6 and (data.slice(0,6) == bytes((71, 73, 70, 56, 55, 97)) or data.slice(0,6) == (71, 73, 70, 56, 57, 97))
}

#let is_bmp(data) = {
  return data.len() >= 2 and data.slice(0,2) == bytes((66, 77))
}

#let is_tiff(data) = {
  return data.len() >= 4 and (data.slice(0,4) == bytes((73, 73, 42, 0)) or data.slice(0,4) == bytes((77, 77, 0, 42)))
}

#let is_ico(data) = {
  return data.len() >= 4 and data.slice(0,4) == bytes((0, 0, 1, 0))
}

#let is_cur(data) = {
  return data.len() >= 4 and data.slice(0,4) == bytes((0, 0, 2, 0))
}

#let arr2int(arr, byte_order : "big") = {
  let sum = 0
  let is_negative = false
  arr =  if byte_order != "big" {arr.rev()} else {arr}
  let highest_byte = arr.at(0)

  is_negative = highest_byte >= 128
  if is_negative {
    arr = arr.map((v)=>255-v)
    arr.at(-1) += 1
  }

  for i in range(0,arr.len()) {
    let elt = arr.at(i)
      sum = sum * 256 + elt
  }

  if is_negative {
    -sum
  } else {
    sum
  }
}


#let pow2(i) = {
  let result = 1
  for j in range(0,i) {
    result = result * 2
  }
  result
}


#let div_remainder(dividend, divisor) = {
  let quotient = int(dividend / divisor)
  let remainder = dividend - (quotient * divisor)
  return remainder
}

#let xor(a, b) = {
  let result = 0
  for i in range(0,63) {
    let pow2_i = pow2(i)
    let bit_a = div_remainder(int(a / pow2_i) , 2)
    let bit_b = div_remainder(int(b / pow2_i) , 2)
    if bit_a != bit_b{
      result = result + pow2_i
    }
  }
  return result
}


#let crc32_table = (0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117)

#let calc_crc32(data)= {
  let crc = 0xFFFFFFFF
  for b in data {
     let index = xor(crc,b)
     index = div_remainder(index,256)
     crc = int(crc / 256)
     crc = div_remainder(crc,16777216)
     crc = xor(crc,crc32_table.at(index))
  }
  crc = xor(crc,0xFFFFFFFF)
  crc
}

